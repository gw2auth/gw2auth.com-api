name: 'Build, Test, Deploy'

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
      - beta

env:
  GO_VERSION: '^1.20.4'
  GOOS: 'linux'
  GOARCH: 'amd64' # keep this in sync with the arch configured in CDK!
  CGO_ENABLED: '0'
  NODE_VERSION: '18'
  WORKSPACE_ARTIFACT_API: 'gw2auth_api'
  WORKSPACE_ARTIFACT_COLLECTOR: 'otel_collector'
  WORKSPACE_ARTIFACT_CDK: 'cdk_synth'

jobs:
  build_api:
    name: 'Build API'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Build API'
        working-directory: 'go'
        run: (go build -o gw2auth_api -tags "lambda,lambda.norpc,lambdahttpadapter.partial,lambdahttpadapter.echo,lambdahttpadapter.functionurl")
      - name: 'Prepare lambda bundle'
        working-directory: 'go'
        run: (chmod +x gw2auth_api && zip -q gw2auth_api.zip gw2auth_api && rm gw2auth_api)
      - name: 'Store API artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_API }}
          path: 'go/gw2auth_api.zip'
          retention-days: 1

  build_otel_collector:
    name: 'Build otel collector'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'SSH Key for CDK'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CDK_SSH_KEY }}
      - name: 'Checkout submodules'
        run: git submodule update --init --recursive --remote
      - name: 'Setup go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Build otel collector'
        working-directory: 'opentelemetry-lambda/collector'
        run: go build -o otel_collector
      - name: 'Prepare lambda extension bundle'
        working-directory: 'opentelemetry-lambda/collector'
        run: |
          mkdir lambda_layer_bundle
          mkdir lambda_layer_bundle/extensions
          cp otel_collector lambda_layer_bundle/extensions/layer
          cp ../../collector.yaml lambda_layer_bundle/
          chmod +x lambda_layer_bundle/extensions/layer
          (cd lambda_layer_bundle && zip -r ../lambda_layer.zip .)
      - name: 'Store otel collector artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_COLLECTOR }}
          path: 'opentelemetry-lambda/collector/lambda_layer.zip'
          retention-days: 1

  build_and_synth_cdk:
    name: 'Build and synth cdk'
    runs-on: ubuntu-latest
    needs:
      - build_api
      - build_otel_collector
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'SSH Key for CDK'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CDK_SSH_KEY }}
      - name: 'Checkout submodules'
        run: git submodule update --init --recursive --remote
      - name: 'Download API artifact'
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_API }}
          path: ./cdk
      - name: 'Download otel collector artifact'
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_COLLECTOR }}
          path: ./cdk
      - name: 'Setup node ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 'Install cdk'
        run: npm install -g aws-cdk
      - name: 'Install npm dependencies'
        working-directory: 'cdk'
        run: npm install
      - name: 'Build cdk app'
        working-directory: 'cdk'
        run: npm run build
      - name: 'Synth cdk'
        working-directory: 'cdk'
        env:
          GRAFANA_CLOUD_AUTH: ${{ secrets.GRAFANA_CLOUD_AUTH }}
        run: cdk synth --app "npx ts-node --prefer-ts-exts bin/cdk_api.ts"
      - name: 'Store cdk synth artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_CDK }}
          path: |
            cdk/cdk.out/
            cdk/cdk.json
          retention-days: 1

  deploy:
    name: 'Deploy'
    if: github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ (github.ref == 'refs/heads/beta' && 'beta') || (github.ref == 'refs/heads/main' && 'prod') || 'unknown' }}
    needs:
      - build_api
      - build_and_synth_cdk
    steps:
      - name: 'Download cdk synth artifact'
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_CDK }}
          path: .
      - name: 'Setup node ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 'Install cdk'
        run: npm install -g aws-cdk
      - name: 'AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_CDK_ROLE }}
          aws-region: ${{ secrets.AWS_CDK_REGION }}
      - name: 'Deploy beta'
        if: github.ref == 'refs/heads/beta'
        run: (cdk --app ./cdk.out deploy --require-approval never Gw2AuthApi-Beta)
      - name: 'Deploy prod'
        if: github.ref == 'refs/heads/main'
        run: (cdk --app ./cdk.out deploy --require-approval never Gw2AuthApi-Beta)

  create_pull_request:
    name: 'Create PR'
    if: github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    needs:
      - deploy
    permissions:
      pull-requests: write
    steps:
      - name: 'Create PR'
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const pulls = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              head: context.ref,
              base: 'main',
              state: 'open',
            });
            
            if (pulls.data.length < 1) {
              await github.rest.pulls.create({
                title: '[CI] Merge beta into main',
                owner: owner,
                repo: repo,
                head: context.ref,
                base: 'main',
                body: [
                  'This PR is auto-generated by',
                  '[actions/github-script](https://github.com/actions/github-script)',
                ].join('\n'),
              });
            } else {
              const existingPR = pulls.data[0];
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: existingPR.number,
                body: [
                  `Updated by Job ${context.job}`,
                ].join('\n'),
              });
            }